#!/bin/bash

# Database backup script
set -e
source /etc/backup/backup.conf

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="{{ backup_base_dir }}/databases/${TIMESTAMP}"
LOG_FILE="{{ backup_log_dir }}/database_backup_${TIMESTAMP}.log"

# Create backup directory
mkdir -p "${BACKUP_DIR}"

# Function for logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${LOG_FILE}"
}

# Function to handle errors
handle_error() {
    log "ERROR: Backup failed - $1"
    {% if backup_notifications_enabled and 'failure' in backup_notification_on %}
    echo "Backup failed - $1" | mail -s "Backup Failure Alert" {{ backup_notification_email }}
    {% endif %}
    exit 1
}

# Backup MongoDB databases
{% for db in backup_databases | selectattr('type', 'equalto', 'mongodb') | list %}
log "Starting backup of MongoDB database: {{ db.name }}"
mongodump --port {{ db.port }} \
          --db {{ db.name }} \
          --out "${BACKUP_DIR}/mongodb" \
          --gzip || handle_error "MongoDB backup failed"
{% endfor %}

# Backup InfluxDB databases
{% for db in backup_databases | selectattr('type', 'equalto', 'influxdb') | list %}
log "Starting backup of InfluxDB database: {{ db.name }}"
influxd backup -portable "${BACKUP_DIR}/influxdb/{{ db.name }}" || handle_error "InfluxDB backup failed"
{% endfor %}

# Compress backup
if [ "{{ backup_compression }}" = "true" ]; then
    log "Compressing backup..."
    cd "${BACKUP_DIR}/.."
    tar czf "${BACKUP_DIR}.tar.gz" "${TIMESTAMP}" || handle_error "Compression failed"
    rm -rf "${BACKUP_DIR}"
fi

# Upload to remote storage if enabled
if [ "{{ backup_remote_enabled }}" = "true" ]; then
    log "Uploading to remote storage..."
    case "{{ backup_remote_type }}" in
        "s3")
            aws s3 cp "${BACKUP_DIR}.tar.gz" "s3://{{ backup_remote_path }}/databases/" || handle_error "S3 upload failed"
            ;;
        "sftp")
            sftp "{{ backup_remote_path }}/databases/" <<< "put ${BACKUP_DIR}.tar.gz" || handle_error "SFTP upload failed"
            ;;
        "nfs")
            cp "${BACKUP_DIR}.tar.gz" "{{ backup_remote_path }}/databases/" || handle_error "NFS copy failed"
            ;;
    esac
fi

log "Database backup completed successfully"

{% if backup_notifications_enabled and 'success' in backup_notification_on %}
echo "Database backup completed successfully" | mail -s "Backup Success Notification" {{ backup_notification_email }}
{% endif %}

exit 0
