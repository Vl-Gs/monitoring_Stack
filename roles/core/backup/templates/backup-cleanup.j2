#!/bin/bash

# Backup cleanup script
set -e
source /etc/backup/backup.conf

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_FILE="{{ backup_log_dir }}/backup_cleanup_${TIMESTAMP}.log"

# Function for logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${LOG_FILE}"
}

# Function to handle errors
handle_error() {
    log "ERROR: Cleanup failed - $1"
    {% if backup_notifications_enabled and 'failure' in backup_notification_on %}
    echo "Backup cleanup failed - $1" | mail -s "Backup Cleanup Failure" {{ backup_notification_email }}
    {% endif %}
    exit 1
}

# Cleanup local backups
log "Starting local backup cleanup"

# Clean database backups
find {{ backup_base_dir }}/databases/ -type f -name "*.tar.gz" -mtime +{{ backup_retention_days }} -delete || handle_error "Failed to cleanup old database backups"

# Clean configuration backups
find {{ backup_base_dir }}/configurations/ -type f -name "*.tar.gz" -mtime +{{ backup_retention_days }} -delete || handle_error "Failed to cleanup old configuration backups"

# Clean temporary directory
find {{ backup_temp_dir }}/ -type d -mtime +1 -exec rm -rf {} + || handle_error "Failed to cleanup temporary directory"

# Cleanup remote backups if enabled
if [ "{{ backup_remote_enabled }}" = "true" ]; then
    log "Starting remote backup cleanup"
    case "{{ backup_remote_type }}" in
        "s3")
            aws s3 ls "s3://{{ backup_remote_path }}" | while read -r line; do
                createDate=$(echo $line | awk {'print $1" "$2'})
                createDate=$(date -d "$createDate" +%s)
                olderThan=$(date -d "-{{ backup_remote_retention_days }} days" +%s)
                if [[ $createDate -lt $olderThan ]]
                then 
                    fileName=$(echo $line | awk {'print $4'})
                    if [ -n "$fileName" ]; then
                        aws s3 rm "s3://{{ backup_remote_path }}/$fileName" || handle_error "Failed to cleanup S3 backup: $fileName"
                    fi
                fi
            done
            ;;
        "sftp")
            # Add SFTP cleanup logic here
            log "SFTP cleanup not implemented"
            ;;
        "nfs")
            find "{{ backup_remote_path }}" -type f -mtime +{{ backup_remote_retention_days }} -delete || handle_error "Failed to cleanup NFS backups"
            ;;
    esac
fi

log "Backup cleanup completed successfully"

{% if backup_notifications_enabled and 'success' in backup_notification_on %}
echo "Backup cleanup completed successfully" | mail -s "Backup Cleanup Success" {{ backup_notification_email }}
{% endif %}

exit 0
