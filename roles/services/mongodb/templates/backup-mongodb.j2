#!/bin/bash

# MongoDB backup script
set -e

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="{{ mongodb_backup_dir }}/${TIMESTAMP}"
LOG_FILE="/var/log/mongodb/backup-${TIMESTAMP}.log"

# Function for logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${LOG_FILE}"
}

# Function to handle errors
handle_error() {
    log "ERROR: Backup failed - $1"
    exit 1
}

# Create backup directory
mkdir -p "${BACKUP_DIR}"

# MongoDB connection string
{% if mongodb_ssl %}
MONGO_OPTS="--ssl --sslPEMKeyFile {{ mongodb_ssl_cert }} --sslCAFile {{ mongodb_ssl_ca }}"
{% else %}
MONGO_OPTS=""
{% endif %}

{% if mongodb_auth %}
MONGO_AUTH="--username {{ mongodb_admin_user }} --password {{ mongodb_admin_password }} --authenticationDatabase admin"
{% else %}
MONGO_AUTH=""
{% endif %}

# Perform backup
log "Starting MongoDB backup"
mongodump ${MONGO_OPTS} ${MONGO_AUTH} \
    --host localhost:{{ mongodb_port }} \
    --out "${BACKUP_DIR}" \
    --gzip || handle_error "mongodump failed"

# Compress backup
log "Compressing backup"
tar czf "${BACKUP_DIR}.tar.gz" -C "${BACKUP_DIR}/.." "${TIMESTAMP}" || handle_error "Compression failed"
rm -rf "${BACKUP_DIR}"

# Cleanup old backups
find "{{ mongodb_backup_dir }}" -type f -name "*.tar.gz" -mtime +{{ mongodb_backup_retention }} -delete

log "MongoDB backup completed successfully"
exit 0
